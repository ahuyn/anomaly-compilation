local tool_map = {}
local do_not_reroll = {}
gc = game.translate_string
enable_debug = false
function print_dbg(txt, ...)
    arti_debug_mcm.print_dbg("streamlined_upgrades", txt, ...)
end
-- class
function bind(obj)
    obj:bind_object(kit_binder(obj))
end

function convert_kit(sec)
    return tool_map[sec] or "upgr_w_1_external"
end

class "kit_binder" (object_binder)

function kit_binder:__init(obj) super(obj)
	self.first_update = nil
end

function kit_binder:update(delta)
    local obj  = self.object
    local id = obj:id()
    if not self.first_update then
        print_dbg("First update")
        self.first_update = true
        local sec = obj:section()
        if do_not_reroll[sec] then return end
        local roll = math.random(100)
        print_dbg("Destroying %s, roll is %s", sec, roll)
        local roll_chance = upgrades_mcm.get_config("drop") or 25
        if roll <= roll_chance then
            local new_sec = convert_kit(sec)
            local pos = obj:position()
            local lvid = obj:level_vertex_id()
            local gvid = obj:game_vertex_id()
            local pid = obj:parent() and obj:parent():id() or nil
            if pid then
                se_itm = alife_create(new_sec, pos, lvid, gvid, pid)
            else
                se_itm = alife_create(new_sec, pos, lvid, gvid)
            end
            print_dbg("Creating %s in place", new_sec)
        end
        alife_release_id(id)
    end
end

function kit_binder:reload(section)
    object_binder.reload(self, section)
end

function kit_binder:reinit()
    object_binder.reinit(self)
end

function kit_binder:net_spawn(se_abstract)
    if not(object_binder.net_spawn(self, se_abstract)) then
        return false
    end
    return true
end

function kit_binder:net_destroy()
	object_binder.net_destroy(self)
end

function kit_binder:save(stpk)
end

function kit_binder:load(stpk)
end 

function try_combine(item)
    local to_search = item:section()
    local upgr_sec = SYS_GetParam(0, to_search, "upgrade")
    if not upgr_sec then return end
    local num_item = 0
    local function search(temp, item)
        local item_section = item:section()
        if item_section == to_search then
            num_item = num_item + 1
        end
    end
    db.actor:iterate_inventory(search, nil)
    if (num_item >= 3) then 
        return gc("st_try_combine")
    end
end
function combine(item)
    local to_search = item:section()
    local upgr_sec = SYS_GetParam(0, to_search, "upgrade")
    if not upgr_sec then return end
    local kit_ids = {}
    local num_kits = 0
    local function search(temp, item)
        local item_section = item:section()
        if item_section == to_search then
            num_kits = num_kits + 1
            kit_ids[num_kits] = item:id()
        end
    end
    
    db.actor:iterate_inventory(search, nil)
    if (num_kits >= 3) then
        for i=1,3 do
            alife_release_id(kit_ids[i])
        end
        alife_create_item(upgr_sec, db.actor)
    end
end
function try_downgrade(item)
    local to_search = item:section()
    local down_sec = SYS_GetParam(0, to_search, "downgrade")
    if down_sec then return gc("st_try_downgrade") end
end
function downgrade(item)
    local to_search = item:section()
    local down_sec = SYS_GetParam(0, to_search, "downgrade")
    if down_sec then 
        alife_release_id(item:id())
        alife_create_item(down_sec, db.actor)
    end
end

function on_game_start()
	local ini_mapping = ini_file("items\\settings\\upgrade_mapping.ltx")
    local n = ini_mapping:line_count("upgrade_mapping")

    for i=0,n-1 do
        result, id, value = ini_mapping:r_line_ex("upgrade_mapping",i,"","")
        tool_map[id] = value
        do_not_reroll[value] = true
        workshop_autoinject.remove_existing_recipes(id)
        print_dbg("processed %s = %s", id, value)
    end
    
	local ini_recipe = ini_file("items\\settings\\upgrade_recipes.ltx")
    local m = ini_recipe:line_count("to_add")
    
    for i=0,m-1 do
        result, id, value = ini_recipe:r_line_ex("to_add",i,"","")
        workshop_autoinject.add_new_recipe(4, id, value)
    end
end